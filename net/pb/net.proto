syntax = "proto3";
package net.pb;

option go_package = "/;net_pb";

// Log represents a thread log.
message Log {
    // block is the top-level node's raw data as an ipld.Block.
    bytes block = 1;
}

message GetDocGraphRequest {}

message GetDocGraphReply {}

message PushDocGraphRequest {}

message PushDocGraphReply {}

message GetLogRequest {}

message GetLogReply {}

message PushLogRequest {
    Body body = 1;

    message Body {
        // docID is the ID of the document that is affected by the log.
        bytes docID = 1;
        // cid is the CID of the composite of the document.
        bytes cid = 2;
        // schemaRoot is the SchemaRoot of the collection that the document resides in.
        bytes schemaRoot = 3;
        // creator is the PeerID of the peer that created the log.
        string creator = 4;
        // log hold the block that represent version of the document.
        Log log = 6;
    }
}

// EncryptionKeyTarget is a struct containing information about required doc encryption key.
message EncryptionKeyTarget {
    // docID is the ID of the document that the key is being requested for.
    bytes docID = 1;
    // fieldName if the name of the document field that the key is being requested for.
    // If the fieldName is empty, the key is being requested for the whole document.
    string fieldName = 2;
    // keyID is the hash (Cid) of the key that is being requested.
    bytes keyID = 3;
}

// FetchEncryptionKeyRequest is a request to receive a doc encryption key
// from a peer that holds it.
message FetchEncryptionKeyRequest {
    // targets is the list of docs/fields for which encryption keys are being requested.
    repeated EncryptionKeyTarget targets = 1;
    // schemaRoot is the SchemaRoot of the collection that the document resides in.
    bytes schemaRoot = 2;
    // ephemeralPublicKey is an ephemeral public of the requesting peer for deriving shared secret
    bytes ephemeralPublicKey = 3;
    // signature is the requesting peer's signature of the request
    bytes signature = 4;
}

// FetchEncryptionKeyReply is a response to FetchEncryptionKeyRequest request
// by a peer that holds the requested doc encryption key.
message FetchEncryptionKeyReply {
    // targets is the list of docs/fields for which encryption keys are being requested.
    repeated EncryptionKeyTarget targets = 1;
    // encryptedKeys is an encrypted list of doc encryption keys.
    // It is prepended with the responder's ephemeral public key and a nonce for AES-GCM
    // Each encryption key in the decrypted list corresponds to the key requested in the same index in the targets list.
    bytes encryptedKeys = 2;
    // schemaRoot is the SchemaRoot of the collection that the document resides in.
    bytes schemaRoot = 3;
    // reqEphemeralPublicKey is an ephemeral public of the requesting peer to be used as session id
    bytes reqEphemeralPublicKey = 4;
    // signature is the responding peer's signature of the reply
    bytes signature = 5;
}

message GetHeadLogRequest {}

message PushLogReply {}

message GetHeadLogReply {}

// Service is the peer-to-peer network API for document sync
service Service {
    // GetDocGraph from this peer.
    rpc GetDocGraph(GetDocGraphRequest) returns (GetDocGraphReply) {}
    // PushDocGraph to this peer.
    rpc PushDocGraph(PushDocGraphRequest) returns (PushDocGraphReply) {}
    // GetLog from this peer.
    rpc GetLog(GetLogRequest) returns (GetLogReply) {}
    // PushLog to this peer.
    rpc PushLog(PushLogRequest) returns (PushLogReply) {}
    // TryGenEncryptionKey from this peer.
    rpc TryGenEncryptionKey(FetchEncryptionKeyRequest) returns (FetchEncryptionKeyReply) {}
    // GetHeadLog from this peer
    rpc GetHeadLog(GetHeadLogRequest) returns (GetHeadLogReply) {}
}
