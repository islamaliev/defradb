syntax = "proto3";
package net.pb;

option go_package = "/;net_pb";

// Log represents a thread log.
message Log {
    // block is the top-level node's raw data as an ipld.Block.
    bytes block = 1;
}

message GetDocGraphRequest {}

message GetDocGraphReply {}

message PushDocGraphRequest {}

message PushDocGraphReply {}

message GetLogRequest {}

message GetLogReply {}

message PushLogRequest {
    Body body = 1;

    message Body {
        // docID is the ID of the document that is affected by the log.
        bytes docID = 1;
        // cid is the CID of the composite of the document.
        bytes cid = 2;
        // schemaRoot is the SchemaRoot of the collection that the document resides in.
        bytes schemaRoot = 3;
        // creator is the PeerID of the peer that created the log.
        string creator = 4;
        // log hold the block that represent version of the document.
        Log log = 6;
    }
}

message FetchEncryptionKeyRequest {
    // docID is the ID of the document that is affected by the log.
    bytes docID = 1;
    // cid is the CID of the composite of the document.
    bytes cid = 2;
    // schemaRoot is the SchemaRoot of the collection that the document resides in.
    bytes schemaRoot = 3;
}

message GetHeadLogRequest {}

message PushLogReply {}

message FetchEncryptionKeyReply {
    bytes encryptionKey = 1;
    // cid is the CID of the composite of the document.
    bytes cid = 2;
    // schemaRoot is the SchemaRoot of the collection that the document resides in.
    bytes schemaRoot = 3;
}

message GetHeadLogReply {}

// Service is the peer-to-peer network API for document sync
service Service {
    // GetDocGraph from this peer.
    rpc GetDocGraph(GetDocGraphRequest) returns (GetDocGraphReply) {}
    // PushDocGraph to this peer.
    rpc PushDocGraph(PushDocGraphRequest) returns (PushDocGraphReply) {}
    // GetLog from this peer.
    rpc GetLog(GetLogRequest) returns (GetLogReply) {}
    // PushLog to this peer.
    rpc PushLog(PushLogRequest) returns (PushLogReply) {}
    // TryGenEncryptionKey from this peer.
    rpc TryGenEncryptionKey(FetchEncryptionKeyRequest) returns (FetchEncryptionKeyReply) {}
    // GetHeadLog from this peer
    rpc GetHeadLog(GetHeadLogRequest) returns (GetHeadLogReply) {}
}
